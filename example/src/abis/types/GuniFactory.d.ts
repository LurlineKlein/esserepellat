/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GuniFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createManagedPool(address,address,uint24,uint16,int24,int24)": FunctionFragment;
    "createPool(address,address,uint24,int24,int24)": FunctionFragment;
    "factory()": FunctionFragment;
    "gelatoDeployer()": FunctionFragment;
    "getDeployers()": FunctionFragment;
    "getGelatoPools()": FunctionFragment;
    "getPools(address)": FunctionFragment;
    "getProxyAdmin(address)": FunctionFragment;
    "getTokenName(address,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isPoolImmutable(address)": FunctionFragment;
    "makePoolsImmutable(address[])": FunctionFragment;
    "manager()": FunctionFragment;
    "numDeployers()": FunctionFragment;
    "numPools()": FunctionFragment;
    "poolImplementation()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGelatoDeployer(address)": FunctionFragment;
    "setPoolImplementation(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradePools(address[])": FunctionFragment;
    "upgradePoolsAndCall(address[],bytes[])": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createManagedPool",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gelatoDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGelatoPools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenName",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolImmutable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "makePoolsImmutable",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numDeployers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGelatoDeployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePoolsAndCall",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createManagedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gelatoDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGelatoPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolImmutable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePoolsImmutable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numDeployers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGelatoDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePoolsAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(address,address,address)": EventFragment;
    "UpdateGelatoDeployer(address,address)": EventFragment;
    "UpdatePoolImplementation(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGelatoDeployer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePoolImplementation"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousManager: string; newManager: string }
>;

export type PoolCreatedEvent = TypedEvent<
  [string, string, string] & { uniPool: string; manager: string; pool: string }
>;

export type UpdateGelatoDeployerEvent = TypedEvent<
  [string, string] & {
    previosGelatoDeployer: string;
    newGelatoDeployer: string;
  }
>;

export type UpdatePoolImplementationEvent = TypedEvent<
  [string, string] & {
    previousImplementation: string;
    newImplementation: string;
  }
>;

export class GuniFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GuniFactoryInterface;

  functions: {
    createManagedPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      managerFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    gelatoDeployer(overrides?: CallOverrides): Promise<[string]>;

    getDeployers(overrides?: CallOverrides): Promise<[string[]]>;

    getGelatoPools(overrides?: CallOverrides): Promise<[string[]]>;

    getPools(deployer: string, overrides?: CallOverrides): Promise<[string[]]>;

    getProxyAdmin(pool: string, overrides?: CallOverrides): Promise<[string]>;

    getTokenName(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _implementation: string,
      _gelatoDeployer: string,
      _manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPoolImmutable(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    makePoolsImmutable(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    numDeployers(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numPools()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    "numPools(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolImplementation(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGelatoDeployer(
      nextGelatoDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolImplementation(
      nextImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradePoolsAndCall(
      pools: string[],
      datas: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  createManagedPool(
    tokenA: string,
    tokenB: string,
    uniFee: BigNumberish,
    managerFee: BigNumberish,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPool(
    tokenA: string,
    tokenB: string,
    uniFee: BigNumberish,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  gelatoDeployer(overrides?: CallOverrides): Promise<string>;

  getDeployers(overrides?: CallOverrides): Promise<string[]>;

  getGelatoPools(overrides?: CallOverrides): Promise<string[]>;

  getPools(deployer: string, overrides?: CallOverrides): Promise<string[]>;

  getProxyAdmin(pool: string, overrides?: CallOverrides): Promise<string>;

  getTokenName(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _implementation: string,
    _gelatoDeployer: string,
    _manager_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPoolImmutable(pool: string, overrides?: CallOverrides): Promise<boolean>;

  makePoolsImmutable(
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  numDeployers(overrides?: CallOverrides): Promise<BigNumber>;

  "numPools()"(overrides?: CallOverrides): Promise<BigNumber>;

  "numPools(address)"(
    deployer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolImplementation(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGelatoDeployer(
    nextGelatoDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolImplementation(
    nextImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePools(
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradePoolsAndCall(
    pools: string[],
    datas: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createManagedPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      managerFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    gelatoDeployer(overrides?: CallOverrides): Promise<string>;

    getDeployers(overrides?: CallOverrides): Promise<string[]>;

    getGelatoPools(overrides?: CallOverrides): Promise<string[]>;

    getPools(deployer: string, overrides?: CallOverrides): Promise<string[]>;

    getProxyAdmin(pool: string, overrides?: CallOverrides): Promise<string>;

    getTokenName(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _implementation: string,
      _gelatoDeployer: string,
      _manager_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPoolImmutable(pool: string, overrides?: CallOverrides): Promise<boolean>;

    makePoolsImmutable(
      pools: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    numDeployers(overrides?: CallOverrides): Promise<BigNumber>;

    "numPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    "numPools(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolImplementation(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGelatoDeployer(
      nextGelatoDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolImplementation(
      nextImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePools(pools: string[], overrides?: CallOverrides): Promise<void>;

    upgradePoolsAndCall(
      pools: string[],
      datas: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousManager?: string | null,
      newManager?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousManager: string; newManager: string }
    >;

    OwnershipTransferred(
      previousManager?: string | null,
      newManager?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousManager: string; newManager: string }
    >;

    "PoolCreated(address,address,address)"(
      uniPool?: string | null,
      manager?: string | null,
      pool?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { uniPool: string; manager: string; pool: string }
    >;

    PoolCreated(
      uniPool?: string | null,
      manager?: string | null,
      pool?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { uniPool: string; manager: string; pool: string }
    >;

    "UpdateGelatoDeployer(address,address)"(
      previosGelatoDeployer?: null,
      newGelatoDeployer?: null
    ): TypedEventFilter<
      [string, string],
      { previosGelatoDeployer: string; newGelatoDeployer: string }
    >;

    UpdateGelatoDeployer(
      previosGelatoDeployer?: null,
      newGelatoDeployer?: null
    ): TypedEventFilter<
      [string, string],
      { previosGelatoDeployer: string; newGelatoDeployer: string }
    >;

    "UpdatePoolImplementation(address,address)"(
      previousImplementation?: null,
      newImplementation?: null
    ): TypedEventFilter<
      [string, string],
      { previousImplementation: string; newImplementation: string }
    >;

    UpdatePoolImplementation(
      previousImplementation?: null,
      newImplementation?: null
    ): TypedEventFilter<
      [string, string],
      { previousImplementation: string; newImplementation: string }
    >;
  };

  estimateGas: {
    createManagedPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      managerFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    gelatoDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployers(overrides?: CallOverrides): Promise<BigNumber>;

    getGelatoPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

    getProxyAdmin(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenName(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _implementation: string,
      _gelatoDeployer: string,
      _manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPoolImmutable(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makePoolsImmutable(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    numDeployers(overrides?: CallOverrides): Promise<BigNumber>;

    "numPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    "numPools(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGelatoDeployer(
      nextGelatoDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolImplementation(
      nextImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradePoolsAndCall(
      pools: string[],
      datas: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createManagedPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      managerFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      tokenA: string,
      tokenB: string,
      uniFee: BigNumberish,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gelatoDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeployers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGelatoPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPools(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyAdmin(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenName(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _implementation: string,
      _gelatoDeployer: string,
      _manager_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPoolImmutable(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makePoolsImmutable(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numDeployers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numPools()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numPools(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGelatoDeployer(
      nextGelatoDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolImplementation(
      nextImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePools(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradePoolsAndCall(
      pools: string[],
      datas: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
