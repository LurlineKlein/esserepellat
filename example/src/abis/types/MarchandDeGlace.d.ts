/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarchandDeGlaceInterface extends ethers.utils.Interface {
  functions: {
    "DOLPHIN_MAX_GEL()": FunctionFragment;
    "DOLPHIN_MIN_GEL()": FunctionFragment;
    "GEL()": FunctionFragment;
    "POOL_ONE_GEL_CAP()": FunctionFragment;
    "SIGNER()": FunctionFragment;
    "TOTAL_GEL_CAP()": FunctionFragment;
    "WHALE_MAX_GEL()": FunctionFragment;
    "WHALE_MIN_GEL()": FunctionFragment;
    "buyDolphin(bytes)": FunctionFragment;
    "buyWhale(bytes)": FunctionFragment;
    "canBuyDolphin(address,bytes,uint256)": FunctionFragment;
    "canBuyWhale(address,bytes,uint256)": FunctionFragment;
    "gelBoughtByDolphin(address)": FunctionFragment;
    "gelLockedByWhale(address)": FunctionFragment;
    "gelPerEth()": FunctionFragment;
    "getBuyableRemainingGel()": FunctionFragment;
    "getGELToBuy(uint256)": FunctionFragment;
    "getRemainingGel()": FunctionFragment;
    "getRemainingGelPoolOne()": FunctionFragment;
    "hasDolphinNeverBought(address)": FunctionFragment;
    "hasWhaleNeverBought(address)": FunctionFragment;
    "initialize(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isBoughtEqBuyableRemaining(uint256)": FunctionFragment;
    "isBoughtGteDolphinMin(uint256)": FunctionFragment;
    "isBoughtLteDolphinMax(uint256)": FunctionFragment;
    "isBoughtLteRemaining(uint256)": FunctionFragment;
    "isBoughtWithinWhaleCaps(uint256)": FunctionFragment;
    "isDolphin(address,bytes)": FunctionFragment;
    "isPoolOneCapExceeded(uint256)": FunctionFragment;
    "isPoolOneOpen()": FunctionFragment;
    "isPoolTwoOpen()": FunctionFragment;
    "isSaleClosing()": FunctionFragment;
    "isWhale(address,bytes)": FunctionFragment;
    "lockUpEndTime()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "poolOneEndTime()": FunctionFragment;
    "poolOneStartTime()": FunctionFragment;
    "poolTwoEndTime()": FunctionFragment;
    "poolTwoStartTime()": FunctionFragment;
    "reset(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setGelPerEth(uint256)": FunctionFragment;
    "setLockUpEndTime(uint256)": FunctionFragment;
    "setPhaseOneEndTime(uint256)": FunctionFragment;
    "setPhaseOneStartTime(uint256)": FunctionFragment;
    "setPhaseTwoEndTime(uint256)": FunctionFragment;
    "setPhaseTwoStartTime(uint256)": FunctionFragment;
    "totalGelLocked()": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawAllGEL()": FunctionFragment;
    "withdrawETH()": FunctionFragment;
    "withdrawLockedGEL(address)": FunctionFragment;
    "withdrawUnlockedGEL()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOLPHIN_MAX_GEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOLPHIN_MIN_GEL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GEL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POOL_ONE_GEL_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SIGNER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOTAL_GEL_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHALE_MAX_GEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHALE_MIN_GEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyDolphin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "buyWhale", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "canBuyDolphin",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canBuyWhale",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gelBoughtByDolphin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gelLockedByWhale",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gelPerEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBuyableRemainingGel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGELToBuy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingGel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingGelPoolOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasDolphinNeverBought",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasWhaleNeverBought",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoughtEqBuyableRemaining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoughtGteDolphinMin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoughtLteDolphinMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoughtLteRemaining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoughtWithinWhaleCaps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDolphin",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolOneCapExceeded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolOneOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolTwoOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSaleClosing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhale",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockUpEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolOneEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolOneStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolTwoEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolTwoStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reset",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGelPerEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockUpEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhaseOneEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhaseOneStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhaseTwoEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhaseTwoStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGelLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAllGEL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLockedGEL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnlockedGEL",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOLPHIN_MAX_GEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOLPHIN_MIN_GEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GEL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POOL_ONE_GEL_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SIGNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_GEL_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHALE_MAX_GEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHALE_MIN_GEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyDolphin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyWhale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canBuyDolphin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canBuyWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gelBoughtByDolphin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gelLockedByWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gelPerEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyableRemainingGel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGELToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingGel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingGelPoolOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDolphinNeverBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasWhaleNeverBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBoughtEqBuyableRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBoughtGteDolphinMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBoughtLteDolphinMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBoughtLteRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBoughtWithinWhaleCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDolphin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolOneCapExceeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolOneOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolTwoOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSaleClosing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWhale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockUpEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolOneEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolOneStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTwoEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTwoStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGelPerEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockUpEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhaseOneEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhaseOneStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhaseTwoEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhaseTwoStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGelLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllGEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLockedGEL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnlockedGEL",
    data: BytesLike
  ): Result;

  events: {
    "LogBuyDolphin(address,uint256,uint256)": EventFragment;
    "LogBuyWhale(address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawLockedGEL(address,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBuyDolphin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBuyWhale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawLockedGEL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type LogBuyDolphinEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    dolphin: string;
    ethPaid: BigNumber;
    gelBought: BigNumber;
  }
>;

export type LogBuyWhaleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    whale: string;
    ethPaid: BigNumber;
    gelBought: BigNumber;
    gelLocked: BigNumber;
    gelUnlocked: BigNumber;
  }
>;

export type LogWithdrawLockedGELEvent = TypedEvent<
  [string, string, BigNumber] & {
    whale: string;
    to: string;
    gelWithdrawn: BigNumber;
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class MarchandDeGlace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarchandDeGlaceInterface;

  functions: {
    DOLPHIN_MAX_GEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOLPHIN_MIN_GEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    GEL(overrides?: CallOverrides): Promise<[string]>;

    POOL_ONE_GEL_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    SIGNER(overrides?: CallOverrides): Promise<[string]>;

    TOTAL_GEL_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    WHALE_MAX_GEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    WHALE_MIN_GEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyDolphin(
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyWhale(
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canBuyDolphin(
      _dolphin: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canBuyWhale(
      _whale: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    gelBoughtByDolphin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gelLockedByWhale(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gelPerEth(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBuyableRemainingGel(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGELToBuy(
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemainingGel(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRemainingGelPoolOne(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasDolphinNeverBought(
      _dolphin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasWhaleNeverBought(
      _whale: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _gelPerEth: BigNumberish,
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      _lockUpEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBoughtEqBuyableRemaining(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBoughtGteDolphinMin(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBoughtLteDolphinMax(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBoughtLteRemaining(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBoughtWithinWhaleCaps(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDolphin(
      _dolphin: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolOneCapExceeded(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolOneOpen(overrides?: CallOverrides): Promise<[boolean]>;

    isPoolTwoOpen(overrides?: CallOverrides): Promise<[boolean]>;

    isSaleClosing(overrides?: CallOverrides): Promise<[boolean]>;

    isWhale(
      _whale: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockUpEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poolOneEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolOneStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolTwoEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolTwoStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    reset(
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGelPerEth(
      _gelPerEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockUpEndTime(
      _lockUpEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhaseOneEndTime(
      _poolOneEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhaseOneStartTime(
      _poolOneStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhaseTwoEndTime(
      _poolTwoEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPhaseTwoStartTime(
      _poolTwoStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalGelLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllGEL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLockedGEL(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnlockedGEL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOLPHIN_MAX_GEL(overrides?: CallOverrides): Promise<BigNumber>;

  DOLPHIN_MIN_GEL(overrides?: CallOverrides): Promise<BigNumber>;

  GEL(overrides?: CallOverrides): Promise<string>;

  POOL_ONE_GEL_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  SIGNER(overrides?: CallOverrides): Promise<string>;

  TOTAL_GEL_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  WHALE_MAX_GEL(overrides?: CallOverrides): Promise<BigNumber>;

  WHALE_MIN_GEL(overrides?: CallOverrides): Promise<BigNumber>;

  buyDolphin(
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyWhale(
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canBuyDolphin(
    _dolphin: string,
    _signature: BytesLike,
    _ethToSell: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canBuyWhale(
    _whale: string,
    _signature: BytesLike,
    _ethToSell: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  gelBoughtByDolphin(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gelLockedByWhale(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  gelPerEth(overrides?: CallOverrides): Promise<BigNumber>;

  getBuyableRemainingGel(overrides?: CallOverrides): Promise<BigNumber>;

  getGELToBuy(
    _ethToSell: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemainingGel(overrides?: CallOverrides): Promise<BigNumber>;

  getRemainingGelPoolOne(overrides?: CallOverrides): Promise<BigNumber>;

  hasDolphinNeverBought(
    _dolphin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasWhaleNeverBought(
    _whale: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _gelPerEth: BigNumberish,
    _poolOneStartTime: BigNumberish,
    _poolTwoStartTime: BigNumberish,
    _poolOneEndTime: BigNumberish,
    _poolTwoEndTime: BigNumberish,
    _lockUpEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBoughtEqBuyableRemaining(
    _gelToBuy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBoughtGteDolphinMin(
    _gelToBuy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBoughtLteDolphinMax(
    _gelBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBoughtLteRemaining(
    _gelBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBoughtWithinWhaleCaps(
    _gelBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDolphin(
    _dolphin: string,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolOneCapExceeded(
    _gelToBuy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolOneOpen(overrides?: CallOverrides): Promise<boolean>;

  isPoolTwoOpen(overrides?: CallOverrides): Promise<boolean>;

  isSaleClosing(overrides?: CallOverrides): Promise<boolean>;

  isWhale(
    _whale: string,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockUpEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poolOneEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  poolOneStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  poolTwoEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  poolTwoStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  reset(
    _poolOneStartTime: BigNumberish,
    _poolTwoStartTime: BigNumberish,
    _poolOneEndTime: BigNumberish,
    _poolTwoEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGelPerEth(
    _gelPerEth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockUpEndTime(
    _lockUpEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPhaseOneEndTime(
    _poolOneEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPhaseOneStartTime(
    _poolOneStartTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPhaseTwoEndTime(
    _poolTwoEndTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPhaseTwoStartTime(
    _poolTwoStartTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalGelLocked(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllGEL(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLockedGEL(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnlockedGEL(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOLPHIN_MAX_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    DOLPHIN_MIN_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    GEL(overrides?: CallOverrides): Promise<string>;

    POOL_ONE_GEL_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER(overrides?: CallOverrides): Promise<string>;

    TOTAL_GEL_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    WHALE_MAX_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    WHALE_MIN_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    buyDolphin(_signature: BytesLike, overrides?: CallOverrides): Promise<void>;

    buyWhale(_signature: BytesLike, overrides?: CallOverrides): Promise<void>;

    canBuyDolphin(
      _dolphin: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canBuyWhale(
      _whale: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gelBoughtByDolphin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gelLockedByWhale(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gelPerEth(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyableRemainingGel(overrides?: CallOverrides): Promise<BigNumber>;

    getGELToBuy(
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingGel(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingGelPoolOne(overrides?: CallOverrides): Promise<BigNumber>;

    hasDolphinNeverBought(
      _dolphin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasWhaleNeverBought(
      _whale: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _gelPerEth: BigNumberish,
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      _lockUpEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isBoughtEqBuyableRemaining(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBoughtGteDolphinMin(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBoughtLteDolphinMax(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBoughtLteRemaining(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBoughtWithinWhaleCaps(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDolphin(
      _dolphin: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolOneCapExceeded(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolOneOpen(overrides?: CallOverrides): Promise<boolean>;

    isPoolTwoOpen(overrides?: CallOverrides): Promise<boolean>;

    isSaleClosing(overrides?: CallOverrides): Promise<boolean>;

    isWhale(
      _whale: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockUpEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poolOneEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    poolOneStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    poolTwoEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    poolTwoStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    reset(
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGelPerEth(
      _gelPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockUpEndTime(
      _lockUpEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhaseOneEndTime(
      _poolOneEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhaseOneStartTime(
      _poolOneStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhaseTwoEndTime(
      _poolTwoEndTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhaseTwoStartTime(
      _poolTwoStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalGelLocked(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawAllGEL(overrides?: CallOverrides): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;

    withdrawLockedGEL(_to: string, overrides?: CallOverrides): Promise<void>;

    withdrawUnlockedGEL(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogBuyDolphin(address,uint256,uint256)"(
      dolphin?: string | null,
      ethPaid?: null,
      gelBought?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { dolphin: string; ethPaid: BigNumber; gelBought: BigNumber }
    >;

    LogBuyDolphin(
      dolphin?: string | null,
      ethPaid?: null,
      gelBought?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { dolphin: string; ethPaid: BigNumber; gelBought: BigNumber }
    >;

    "LogBuyWhale(address,uint256,uint256,uint256,uint256)"(
      whale?: string | null,
      ethPaid?: null,
      gelBought?: null,
      gelLocked?: null,
      gelUnlocked?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        whale: string;
        ethPaid: BigNumber;
        gelBought: BigNumber;
        gelLocked: BigNumber;
        gelUnlocked: BigNumber;
      }
    >;

    LogBuyWhale(
      whale?: string | null,
      ethPaid?: null,
      gelBought?: null,
      gelLocked?: null,
      gelUnlocked?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        whale: string;
        ethPaid: BigNumber;
        gelBought: BigNumber;
        gelLocked: BigNumber;
        gelUnlocked: BigNumber;
      }
    >;

    "LogWithdrawLockedGEL(address,address,uint256)"(
      whale?: string | null,
      to?: string | null,
      gelWithdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { whale: string; to: string; gelWithdrawn: BigNumber }
    >;

    LogWithdrawLockedGEL(
      whale?: string | null,
      to?: string | null,
      gelWithdrawn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { whale: string; to: string; gelWithdrawn: BigNumber }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    DOLPHIN_MAX_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    DOLPHIN_MIN_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    GEL(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_ONE_GEL_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_GEL_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    WHALE_MAX_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    WHALE_MIN_GEL(overrides?: CallOverrides): Promise<BigNumber>;

    buyDolphin(
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyWhale(
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canBuyDolphin(
      _dolphin: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canBuyWhale(
      _whale: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gelBoughtByDolphin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gelLockedByWhale(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gelPerEth(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyableRemainingGel(overrides?: CallOverrides): Promise<BigNumber>;

    getGELToBuy(
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingGel(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingGelPoolOne(overrides?: CallOverrides): Promise<BigNumber>;

    hasDolphinNeverBought(
      _dolphin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasWhaleNeverBought(
      _whale: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _gelPerEth: BigNumberish,
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      _lockUpEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBoughtEqBuyableRemaining(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBoughtGteDolphinMin(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBoughtLteDolphinMax(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBoughtLteRemaining(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBoughtWithinWhaleCaps(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDolphin(
      _dolphin: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolOneCapExceeded(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolOneOpen(overrides?: CallOverrides): Promise<BigNumber>;

    isPoolTwoOpen(overrides?: CallOverrides): Promise<BigNumber>;

    isSaleClosing(overrides?: CallOverrides): Promise<BigNumber>;

    isWhale(
      _whale: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockUpEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poolOneEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    poolOneStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    poolTwoEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    poolTwoStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    reset(
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGelPerEth(
      _gelPerEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockUpEndTime(
      _lockUpEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPhaseOneEndTime(
      _poolOneEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPhaseOneStartTime(
      _poolOneStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPhaseTwoEndTime(
      _poolTwoEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPhaseTwoStartTime(
      _poolTwoStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalGelLocked(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllGEL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLockedGEL(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnlockedGEL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLPHIN_MAX_GEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLPHIN_MIN_GEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_ONE_GEL_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_GEL_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHALE_MAX_GEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHALE_MIN_GEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyDolphin(
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyWhale(
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canBuyDolphin(
      _dolphin: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canBuyWhale(
      _whale: string,
      _signature: BytesLike,
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gelBoughtByDolphin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gelLockedByWhale(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gelPerEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyableRemainingGel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGELToBuy(
      _ethToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingGel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRemainingGelPoolOne(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDolphinNeverBought(
      _dolphin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasWhaleNeverBought(
      _whale: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _gelPerEth: BigNumberish,
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      _lockUpEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBoughtEqBuyableRemaining(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBoughtGteDolphinMin(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBoughtLteDolphinMax(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBoughtLteRemaining(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBoughtWithinWhaleCaps(
      _gelBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDolphin(
      _dolphin: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolOneCapExceeded(
      _gelToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolOneOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolTwoOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSaleClosing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhale(
      _whale: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockUpEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolOneEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolOneStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTwoEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTwoStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reset(
      _poolOneStartTime: BigNumberish,
      _poolTwoStartTime: BigNumberish,
      _poolOneEndTime: BigNumberish,
      _poolTwoEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGelPerEth(
      _gelPerEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockUpEndTime(
      _lockUpEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPhaseOneEndTime(
      _poolOneEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPhaseOneStartTime(
      _poolOneStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPhaseTwoEndTime(
      _poolTwoEndTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPhaseTwoStartTime(
      _poolTwoStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalGelLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllGEL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLockedGEL(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnlockedGEL(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
