/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GuniRouterInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "isToken0Weth(address,address)": FunctionFragment;
    "rebalanceAndAddLiquidity(address,uint256,uint256,uint256,bool,address[],bytes[],uint256,uint256,address)": FunctionFragment;
    "rebalanceAndAddLiquidityETH(address,uint256,uint256,uint256,bool,address[],bytes[],uint256,uint256,address)": FunctionFragment;
    "removeLiquidity(address,uint256,uint256,uint256,address)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isToken0Weth",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceAndAddLiquidity",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string[],
      BytesLike[],
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceAndAddLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string[],
      BytesLike[],
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isToken0Weth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceAndAddLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class GuniRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GuniRouterInterface;

  functions: {
    addLiquidity(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isToken0Weth(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { wethToken0: boolean }>;

    rebalanceAndAddLiquidity(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalanceAndAddLiquidityETH(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    _pool: string,
    _amount0Max: BigNumberish,
    _amount1Max: BigNumberish,
    _amount0Min: BigNumberish,
    _amount1Min: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    _pool: string,
    _amount0Max: BigNumberish,
    _amount1Max: BigNumberish,
    _amount0Min: BigNumberish,
    _amount1Min: BigNumberish,
    _receiver: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isToken0Weth(
    _token0: string,
    _token1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rebalanceAndAddLiquidity(
    _pool: string,
    _amount0In: BigNumberish,
    _amount1In: BigNumberish,
    _amountSwap: BigNumberish,
    _zeroForOne: boolean,
    _swapActions: string[],
    _swapDatas: BytesLike[],
    _amount0Min: BigNumberish,
    _amount1Min: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalanceAndAddLiquidityETH(
    _pool: string,
    _amount0In: BigNumberish,
    _amount1In: BigNumberish,
    _amountSwap: BigNumberish,
    _zeroForOne: boolean,
    _swapActions: string[],
    _swapDatas: BytesLike[],
    _amount0Min: BigNumberish,
    _amount1Min: BigNumberish,
    _receiver: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    _pool: string,
    _burnAmount: BigNumberish,
    _amount0Min: BigNumberish,
    _amount1Min: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    _pool: string,
    _burnAmount: BigNumberish,
    _amount0Min: BigNumberish,
    _amount1Min: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    addLiquidityETH(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    isToken0Weth(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rebalanceAndAddLiquidity(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    rebalanceAndAddLiquidityETH(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    removeLiquidity(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        liquidityBurned: BigNumber;
      }
    >;

    removeLiquidityETH(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        liquidityBurned: BigNumber;
      }
    >;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityETH(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isToken0Weth(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceAndAddLiquidity(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalanceAndAddLiquidityETH(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityETH(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      _pool: string,
      _amount0Max: BigNumberish,
      _amount1Max: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isToken0Weth(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceAndAddLiquidity(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceAndAddLiquidityETH(
      _pool: string,
      _amount0In: BigNumberish,
      _amount1In: BigNumberish,
      _amountSwap: BigNumberish,
      _zeroForOne: boolean,
      _swapActions: string[],
      _swapDatas: BytesLike[],
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      _pool: string,
      _burnAmount: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
